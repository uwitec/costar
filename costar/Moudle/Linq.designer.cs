#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moudle
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="costar")]
	public partial class LinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertAppliedUpdates(AppliedUpdates instance);
    partial void UpdateAppliedUpdates(AppliedUpdates instance);
    partial void DeleteAppliedUpdates(AppliedUpdates instance);
    partial void InsertStoreVariantTypes(StoreVariantTypes instance);
    partial void UpdateStoreVariantTypes(StoreVariantTypes instance);
    partial void DeleteStoreVariantTypes(StoreVariantTypes instance);
    partial void InsertStoreAnimes(StoreAnimes instance);
    partial void UpdateStoreAnimes(StoreAnimes instance);
    partial void DeleteStoreAnimes(StoreAnimes instance);
    partial void InsertStoreColors(StoreColors instance);
    partial void UpdateStoreColors(StoreColors instance);
    partial void DeleteStoreColors(StoreColors instance);
    partial void InsertStoreProductColors(StoreProductColors instance);
    partial void UpdateStoreProductColors(StoreProductColors instance);
    partial void DeleteStoreProductColors(StoreProductColors instance);
    partial void InsertStoreProducts(StoreProducts instance);
    partial void UpdateStoreProducts(StoreProducts instance);
    partial void DeleteStoreProducts(StoreProducts instance);
    partial void InsertStoreVariantTypeOptions(StoreVariantTypeOptions instance);
    partial void UpdateStoreVariantTypeOptions(StoreVariantTypeOptions instance);
    partial void DeleteStoreVariantTypeOptions(StoreVariantTypeOptions instance);
    #endregion
		
		public LinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AppliedUpdates> AppliedUpdates
		{
			get
			{
				return this.GetTable<AppliedUpdates>();
			}
		}
		
		public System.Data.Linq.Table<StoreVariantTypes> StoreVariantTypes
		{
			get
			{
				return this.GetTable<StoreVariantTypes>();
			}
		}
		
		public System.Data.Linq.Table<StoreAnimes> StoreAnimes
		{
			get
			{
				return this.GetTable<StoreAnimes>();
			}
		}
		
		public System.Data.Linq.Table<StoreColors> StoreColors
		{
			get
			{
				return this.GetTable<StoreColors>();
			}
		}
		
		public System.Data.Linq.Table<StoreProductColors> StoreProductColors
		{
			get
			{
				return this.GetTable<StoreProductColors>();
			}
		}
		
		public System.Data.Linq.Table<StoreProducts> StoreProducts
		{
			get
			{
				return this.GetTable<StoreProducts>();
			}
		}
		
		public System.Data.Linq.Table<StoreVariantTypeOptions> StoreVariantTypeOptions
		{
			get
			{
				return this.GetTable<StoreVariantTypeOptions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppliedUpdates")]
	public partial class AppliedUpdates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UpdateID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUpdateIDChanging(long value);
    partial void OnUpdateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public AppliedUpdates()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long UpdateID
		{
			get
			{
				return this._UpdateID;
			}
			set
			{
				if ((this._UpdateID != value))
				{
					this.OnUpdateIDChanging(value);
					this.SendPropertyChanging();
					this._UpdateID = value;
					this.SendPropertyChanged("UpdateID");
					this.OnUpdateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreVariantTypes")]
	public partial class StoreVariantTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VariantTypeID;
		
		private string _GroupName;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntitySet<StoreProducts> _StoreProducts;
		
		private EntitySet<StoreProducts> _StoreProducts1;
		
		private EntitySet<StoreVariantTypeOptions> _StoreVariantTypeOptions;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVariantTypeIDChanging(long value);
    partial void OnVariantTypeIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public StoreVariantTypes()
		{
			this._StoreProducts = new EntitySet<StoreProducts>(new Action<StoreProducts>(this.attach_StoreProducts), new Action<StoreProducts>(this.detach_StoreProducts));
			this._StoreProducts1 = new EntitySet<StoreProducts>(new Action<StoreProducts>(this.attach_StoreProducts1), new Action<StoreProducts>(this.detach_StoreProducts1));
			this._StoreVariantTypeOptions = new EntitySet<StoreVariantTypeOptions>(new Action<StoreVariantTypeOptions>(this.attach_StoreVariantTypeOptions), new Action<StoreVariantTypeOptions>(this.detach_StoreVariantTypeOptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantTypeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long VariantTypeID
		{
			get
			{
				return this._VariantTypeID;
			}
			set
			{
				if ((this._VariantTypeID != value))
				{
					this.OnVariantTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VariantTypeID = value;
					this.SendPropertyChanged("VariantTypeID");
					this.OnVariantTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreVariantTypes_StoreProducts", Storage="_StoreProducts", ThisKey="VariantTypeID", OtherKey="Variant1TypeID")]
		public EntitySet<StoreProducts> StoreProducts
		{
			get
			{
				return this._StoreProducts;
			}
			set
			{
				this._StoreProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreVariantTypes_StoreProducts1", Storage="_StoreProducts1", ThisKey="VariantTypeID", OtherKey="Variant2TypeID")]
		public EntitySet<StoreProducts> StoreProducts1
		{
			get
			{
				return this._StoreProducts1;
			}
			set
			{
				this._StoreProducts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreVariantTypes_StoreVariantTypeOptions", Storage="_StoreVariantTypeOptions", ThisKey="VariantTypeID", OtherKey="VariantTypeID")]
		public EntitySet<StoreVariantTypeOptions> StoreVariantTypeOptions
		{
			get
			{
				return this._StoreVariantTypeOptions;
			}
			set
			{
				this._StoreVariantTypeOptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoreProducts(StoreProducts entity)
		{
			this.SendPropertyChanging();
			entity.StoreVariantTypes = this;
		}
		
		private void detach_StoreProducts(StoreProducts entity)
		{
			this.SendPropertyChanging();
			entity.StoreVariantTypes = null;
		}
		
		private void attach_StoreProducts1(StoreProducts entity)
		{
			this.SendPropertyChanging();
			entity.StoreVariantTypes1 = this;
		}
		
		private void detach_StoreProducts1(StoreProducts entity)
		{
			this.SendPropertyChanging();
			entity.StoreVariantTypes1 = null;
		}
		
		private void attach_StoreVariantTypeOptions(StoreVariantTypeOptions entity)
		{
			this.SendPropertyChanging();
			entity.StoreVariantTypes = this;
		}
		
		private void detach_StoreVariantTypeOptions(StoreVariantTypeOptions entity)
		{
			this.SendPropertyChanging();
			entity.StoreVariantTypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreAnimes")]
	public partial class StoreAnimes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnimeID;
		
		private string _AnimeName;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<StoreProducts> _StoreProducts;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnimeIDChanging(int value);
    partial void OnAnimeIDChanged();
    partial void OnAnimeNameChanging(string value);
    partial void OnAnimeNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public StoreAnimes()
		{
			this._StoreProducts = new EntitySet<StoreProducts>(new Action<StoreProducts>(this.attach_StoreProducts), new Action<StoreProducts>(this.detach_StoreProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int AnimeID
		{
			get
			{
				return this._AnimeID;
			}
			set
			{
				if ((this._AnimeID != value))
				{
					this.OnAnimeIDChanging(value);
					this.SendPropertyChanging();
					this._AnimeID = value;
					this.SendPropertyChanged("AnimeID");
					this.OnAnimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimeName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string AnimeName
		{
			get
			{
				return this._AnimeName;
			}
			set
			{
				if ((this._AnimeName != value))
				{
					this.OnAnimeNameChanging(value);
					this.SendPropertyChanging();
					this._AnimeName = value;
					this.SendPropertyChanged("AnimeName");
					this.OnAnimeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreAnimes_StoreProducts", Storage="_StoreProducts", ThisKey="AnimeID", OtherKey="AnimeID")]
		public EntitySet<StoreProducts> StoreProducts
		{
			get
			{
				return this._StoreProducts;
			}
			set
			{
				this._StoreProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoreProducts(StoreProducts entity)
		{
			this.SendPropertyChanging();
			entity.StoreAnimes = this;
		}
		
		private void detach_StoreProducts(StoreProducts entity)
		{
			this.SendPropertyChanging();
			entity.StoreAnimes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreColors")]
	public partial class StoreColors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColorID;
		
		private string _ColorName;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntitySet<StoreProductColors> _StoreProductColors;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnColorNameChanging(string value);
    partial void OnColorNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public StoreColors()
		{
			this._StoreProductColors = new EntitySet<StoreProductColors>(new Action<StoreProductColors>(this.attach_StoreProductColors), new Action<StoreProductColors>(this.detach_StoreProductColors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorName", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if ((this._ColorName != value))
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreColors_StoreProductColors", Storage="_StoreProductColors", ThisKey="ColorID", OtherKey="ColorID")]
		public EntitySet<StoreProductColors> StoreProductColors
		{
			get
			{
				return this._StoreProductColors;
			}
			set
			{
				this._StoreProductColors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoreProductColors(StoreProductColors entity)
		{
			this.SendPropertyChanging();
			entity.StoreColors = this;
		}
		
		private void detach_StoreProductColors(StoreProductColors entity)
		{
			this.SendPropertyChanging();
			entity.StoreColors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreProductColors")]
	public partial class StoreProductColors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProductID;
		
		private int _ColorID;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntityRef<StoreColors> _StoreColors;
		
		private EntityRef<StoreProducts> _StoreProducts;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(long value);
    partial void OnProductIDChanged();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public StoreProductColors()
		{
			this._StoreColors = default(EntityRef<StoreColors>);
			this._StoreProducts = default(EntityRef<StoreProducts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._StoreProducts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					if (this._StoreColors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreColors_StoreProductColors", Storage="_StoreColors", ThisKey="ColorID", OtherKey="ColorID", IsForeignKey=true)]
		public StoreColors StoreColors
		{
			get
			{
				return this._StoreColors.Entity;
			}
			set
			{
				StoreColors previousValue = this._StoreColors.Entity;
				if (((previousValue != value) 
							|| (this._StoreColors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreColors.Entity = null;
						previousValue.StoreProductColors.Remove(this);
					}
					this._StoreColors.Entity = value;
					if ((value != null))
					{
						value.StoreProductColors.Add(this);
						this._ColorID = value.ColorID;
					}
					else
					{
						this._ColorID = default(int);
					}
					this.SendPropertyChanged("StoreColors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreProducts_StoreProductColors", Storage="_StoreProducts", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public StoreProducts StoreProducts
		{
			get
			{
				return this._StoreProducts.Entity;
			}
			set
			{
				StoreProducts previousValue = this._StoreProducts.Entity;
				if (((previousValue != value) 
							|| (this._StoreProducts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreProducts.Entity = null;
						previousValue.StoreProductColors.Remove(this);
					}
					this._StoreProducts.Entity = value;
					if ((value != null))
					{
						value.StoreProductColors.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(long);
					}
					this.SendPropertyChanged("StoreProducts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreProducts")]
	public partial class StoreProducts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProductID;
		
		private int _AnimeID;
		
		private string _ProductCode;
		
		private string _Name;
		
		private string _Description;
		
		private string _Title;
		
		private string _PageName;
		
		private bool _IsActive;
		
		private bool _IsFeatured;
		
		private string _ImageFile;
		
		private string _ImageFile2;
		
		private string _ImageFile3;
		
		private string _ImageFile4;
		
		private System.Nullable<decimal> _RetailPrice;
		
		private decimal _SalePrice;
		
		private System.Nullable<decimal> _VIPPrice;
		
		private System.Nullable<System.DateTime> _DeleteDate;
		
		private System.DateTime _AddeDate;
		
		private System.Nullable<long> _Variant1TypeID;
		
		private System.Nullable<long> _Variant2TypeID;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntitySet<StoreProductColors> _StoreProductColors;
		
		private EntityRef<StoreAnimes> _StoreAnimes;
		
		private EntityRef<StoreVariantTypes> _StoreVariantTypes;
		
		private EntityRef<StoreVariantTypes> _StoreVariantTypes1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(long value);
    partial void OnProductIDChanged();
    partial void OnAnimeIDChanging(int value);
    partial void OnAnimeIDChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsFeaturedChanging(bool value);
    partial void OnIsFeaturedChanged();
    partial void OnImageFileChanging(string value);
    partial void OnImageFileChanged();
    partial void OnImageFile2Changing(string value);
    partial void OnImageFile2Changed();
    partial void OnImageFile3Changing(string value);
    partial void OnImageFile3Changed();
    partial void OnImageFile4Changing(string value);
    partial void OnImageFile4Changed();
    partial void OnRetailPriceChanging(System.Nullable<decimal> value);
    partial void OnRetailPriceChanged();
    partial void OnSalePriceChanging(decimal value);
    partial void OnSalePriceChanged();
    partial void OnVIPPriceChanging(System.Nullable<decimal> value);
    partial void OnVIPPriceChanged();
    partial void OnDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteDateChanged();
    partial void OnAddeDateChanging(System.DateTime value);
    partial void OnAddeDateChanged();
    partial void OnVariant1TypeIDChanging(System.Nullable<long> value);
    partial void OnVariant1TypeIDChanged();
    partial void OnVariant2TypeIDChanging(System.Nullable<long> value);
    partial void OnVariant2TypeIDChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public StoreProducts()
		{
			this._StoreProductColors = new EntitySet<StoreProductColors>(new Action<StoreProductColors>(this.attach_StoreProductColors), new Action<StoreProductColors>(this.detach_StoreProductColors));
			this._StoreAnimes = default(EntityRef<StoreAnimes>);
			this._StoreVariantTypes = default(EntityRef<StoreVariantTypes>);
			this._StoreVariantTypes1 = default(EntityRef<StoreVariantTypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnimeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AnimeID
		{
			get
			{
				return this._AnimeID;
			}
			set
			{
				if ((this._AnimeID != value))
				{
					if (this._StoreAnimes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimeIDChanging(value);
					this.SendPropertyChanging();
					this._AnimeID = value;
					this.SendPropertyChanged("AnimeID");
					this.OnAnimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCode", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFeatured", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFeatured
		{
			get
			{
				return this._IsFeatured;
			}
			set
			{
				if ((this._IsFeatured != value))
				{
					this.OnIsFeaturedChanging(value);
					this.SendPropertyChanging();
					this._IsFeatured = value;
					this.SendPropertyChanged("IsFeatured");
					this.OnIsFeaturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageFile", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string ImageFile
		{
			get
			{
				return this._ImageFile;
			}
			set
			{
				if ((this._ImageFile != value))
				{
					this.OnImageFileChanging(value);
					this.SendPropertyChanging();
					this._ImageFile = value;
					this.SendPropertyChanged("ImageFile");
					this.OnImageFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageFile2", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string ImageFile2
		{
			get
			{
				return this._ImageFile2;
			}
			set
			{
				if ((this._ImageFile2 != value))
				{
					this.OnImageFile2Changing(value);
					this.SendPropertyChanging();
					this._ImageFile2 = value;
					this.SendPropertyChanged("ImageFile2");
					this.OnImageFile2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageFile3", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string ImageFile3
		{
			get
			{
				return this._ImageFile3;
			}
			set
			{
				if ((this._ImageFile3 != value))
				{
					this.OnImageFile3Changing(value);
					this.SendPropertyChanging();
					this._ImageFile3 = value;
					this.SendPropertyChanged("ImageFile3");
					this.OnImageFile3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageFile4", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string ImageFile4
		{
			get
			{
				return this._ImageFile4;
			}
			set
			{
				if ((this._ImageFile4 != value))
				{
					this.OnImageFile4Changing(value);
					this.SendPropertyChanging();
					this._ImageFile4 = value;
					this.SendPropertyChanged("ImageFile4");
					this.OnImageFile4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetailPrice", DbType="SmallMoney", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RetailPrice
		{
			get
			{
				return this._RetailPrice;
			}
			set
			{
				if ((this._RetailPrice != value))
				{
					this.OnRetailPriceChanging(value);
					this.SendPropertyChanging();
					this._RetailPrice = value;
					this.SendPropertyChanged("RetailPrice");
					this.OnRetailPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalePrice", DbType="SmallMoney NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal SalePrice
		{
			get
			{
				return this._SalePrice;
			}
			set
			{
				if ((this._SalePrice != value))
				{
					this.OnSalePriceChanging(value);
					this.SendPropertyChanging();
					this._SalePrice = value;
					this.SendPropertyChanged("SalePrice");
					this.OnSalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIPPrice", DbType="SmallMoney", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> VIPPrice
		{
			get
			{
				return this._VIPPrice;
			}
			set
			{
				if ((this._VIPPrice != value))
				{
					this.OnVIPPriceChanging(value);
					this.SendPropertyChanging();
					this._VIPPrice = value;
					this.SendPropertyChanged("VIPPrice");
					this.OnVIPPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DeleteDate
		{
			get
			{
				return this._DeleteDate;
			}
			set
			{
				if ((this._DeleteDate != value))
				{
					this.OnDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._DeleteDate = value;
					this.SendPropertyChanged("DeleteDate");
					this.OnDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddeDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime AddeDate
		{
			get
			{
				return this._AddeDate;
			}
			set
			{
				if ((this._AddeDate != value))
				{
					this.OnAddeDateChanging(value);
					this.SendPropertyChanging();
					this._AddeDate = value;
					this.SendPropertyChanged("AddeDate");
					this.OnAddeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Variant1TypeID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> Variant1TypeID
		{
			get
			{
				return this._Variant1TypeID;
			}
			set
			{
				if ((this._Variant1TypeID != value))
				{
					if (this._StoreVariantTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariant1TypeIDChanging(value);
					this.SendPropertyChanging();
					this._Variant1TypeID = value;
					this.SendPropertyChanged("Variant1TypeID");
					this.OnVariant1TypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Variant2TypeID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> Variant2TypeID
		{
			get
			{
				return this._Variant2TypeID;
			}
			set
			{
				if ((this._Variant2TypeID != value))
				{
					if (this._StoreVariantTypes1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariant2TypeIDChanging(value);
					this.SendPropertyChanging();
					this._Variant2TypeID = value;
					this.SendPropertyChanged("Variant2TypeID");
					this.OnVariant2TypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreProducts_StoreProductColors", Storage="_StoreProductColors", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<StoreProductColors> StoreProductColors
		{
			get
			{
				return this._StoreProductColors;
			}
			set
			{
				this._StoreProductColors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreAnimes_StoreProducts", Storage="_StoreAnimes", ThisKey="AnimeID", OtherKey="AnimeID", IsForeignKey=true)]
		public StoreAnimes StoreAnimes
		{
			get
			{
				return this._StoreAnimes.Entity;
			}
			set
			{
				StoreAnimes previousValue = this._StoreAnimes.Entity;
				if (((previousValue != value) 
							|| (this._StoreAnimes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreAnimes.Entity = null;
						previousValue.StoreProducts.Remove(this);
					}
					this._StoreAnimes.Entity = value;
					if ((value != null))
					{
						value.StoreProducts.Add(this);
						this._AnimeID = value.AnimeID;
					}
					else
					{
						this._AnimeID = default(int);
					}
					this.SendPropertyChanged("StoreAnimes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreVariantTypes_StoreProducts", Storage="_StoreVariantTypes", ThisKey="Variant1TypeID", OtherKey="VariantTypeID", IsForeignKey=true)]
		public StoreVariantTypes StoreVariantTypes
		{
			get
			{
				return this._StoreVariantTypes.Entity;
			}
			set
			{
				StoreVariantTypes previousValue = this._StoreVariantTypes.Entity;
				if (((previousValue != value) 
							|| (this._StoreVariantTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreVariantTypes.Entity = null;
						previousValue.StoreProducts.Remove(this);
					}
					this._StoreVariantTypes.Entity = value;
					if ((value != null))
					{
						value.StoreProducts.Add(this);
						this._Variant1TypeID = value.VariantTypeID;
					}
					else
					{
						this._Variant1TypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("StoreVariantTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreVariantTypes_StoreProducts1", Storage="_StoreVariantTypes1", ThisKey="Variant2TypeID", OtherKey="VariantTypeID", IsForeignKey=true)]
		public StoreVariantTypes StoreVariantTypes1
		{
			get
			{
				return this._StoreVariantTypes1.Entity;
			}
			set
			{
				StoreVariantTypes previousValue = this._StoreVariantTypes1.Entity;
				if (((previousValue != value) 
							|| (this._StoreVariantTypes1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreVariantTypes1.Entity = null;
						previousValue.StoreProducts1.Remove(this);
					}
					this._StoreVariantTypes1.Entity = value;
					if ((value != null))
					{
						value.StoreProducts1.Add(this);
						this._Variant2TypeID = value.VariantTypeID;
					}
					else
					{
						this._Variant2TypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("StoreVariantTypes1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoreProductColors(StoreProductColors entity)
		{
			this.SendPropertyChanging();
			entity.StoreProducts = this;
		}
		
		private void detach_StoreProductColors(StoreProductColors entity)
		{
			this.SendPropertyChanging();
			entity.StoreProducts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreVariantTypeOptions")]
	public partial class StoreVariantTypeOptions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VariantOptionID;
		
		private long _VariantTypeID;
		
		private string _Name;
		
		private int _SortOrder;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntityRef<StoreVariantTypes> _StoreVariantTypes;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVariantOptionIDChanging(long value);
    partial void OnVariantOptionIDChanged();
    partial void OnVariantTypeIDChanging(long value);
    partial void OnVariantTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public StoreVariantTypeOptions()
		{
			this._StoreVariantTypes = default(EntityRef<StoreVariantTypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantOptionID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long VariantOptionID
		{
			get
			{
				return this._VariantOptionID;
			}
			set
			{
				if ((this._VariantOptionID != value))
				{
					this.OnVariantOptionIDChanging(value);
					this.SendPropertyChanging();
					this._VariantOptionID = value;
					this.SendPropertyChanged("VariantOptionID");
					this.OnVariantOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantTypeID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long VariantTypeID
		{
			get
			{
				return this._VariantTypeID;
			}
			set
			{
				if ((this._VariantTypeID != value))
				{
					if (this._StoreVariantTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariantTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VariantTypeID = value;
					this.SendPropertyChanged("VariantTypeID");
					this.OnVariantTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StoreVariantTypes_StoreVariantTypeOptions", Storage="_StoreVariantTypes", ThisKey="VariantTypeID", OtherKey="VariantTypeID", IsForeignKey=true)]
		public StoreVariantTypes StoreVariantTypes
		{
			get
			{
				return this._StoreVariantTypes.Entity;
			}
			set
			{
				StoreVariantTypes previousValue = this._StoreVariantTypes.Entity;
				if (((previousValue != value) 
							|| (this._StoreVariantTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreVariantTypes.Entity = null;
						previousValue.StoreVariantTypeOptions.Remove(this);
					}
					this._StoreVariantTypes.Entity = value;
					if ((value != null))
					{
						value.StoreVariantTypeOptions.Add(this);
						this._VariantTypeID = value.VariantTypeID;
					}
					else
					{
						this._VariantTypeID = default(long);
					}
					this.SendPropertyChanged("StoreVariantTypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
